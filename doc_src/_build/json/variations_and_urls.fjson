{"body": "<div class=\"section\" id=\"variations-and-urls\">\n<h1>Variations and URLs<a class=\"headerlink\" href=\"#variations-and-urls\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>URLs are important. Content should exist at one and only one URL. Each variation in content needs to have a unique URL. Django Text Variation tries to be as flexible as possible by using middleware to check configured patterns as they are requested.</p>\n<div class=\"section\" id=\"ways-of-handling-variations-in-urls\">\n<h2>Ways of Handling Variations in URLs<a class=\"headerlink\" href=\"#ways-of-handling-variations-in-urls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A great resource for my research was\n<a class=\"reference external\" href=\"http://h3h.net/technology/designing-urls-for-multilingual-websites\">this blog post</a> regarding methods for handling multilingual websites. He defines nine ways of accomplishing language variations in content, many of which are not generic enough for use here.</p>\n<p>First and foremost, <a class=\"reference external\" href=\"http://googlewebmastercentral.blogspot.com/2010/03/working-with-multi-regional-websites.html\">query parameters are not recommended.</a> and will not be supported.</p>\n<p>Ultimately, there are three ways specify a unique variation:</p>\n<ul class=\"simple\">\n<li>Domain</li>\n<li>Path segment</li>\n<li>Path parameters or other delimited suffix</li>\n</ul>\n<p>You can use any combination of these methods to specify your variation.</p>\n<div class=\"section\" id=\"domain\">\n<h3>Domain<a class=\"headerlink\" href=\"#domain\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The domain difference could be at the host level, such as <tt class=\"docutils literal\"><span class=\"pre\">dim1.example.com</span></tt> or at a different top-level domain such as <tt class=\"docutils literal\"><span class=\"pre\">example.es</span></tt>. Top-level domains are probably only useful for specifying language variations.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">You can only vary on one dimension within a domain. That means you can vary on language (<tt class=\"docutils literal\"><span class=\"pre\">en.example.com</span></tt>) or audience (<tt class=\"docutils literal\"><span class=\"pre\">kids.example.com</span></tt>), but not both (<tt class=\"docutils literal\"><span class=\"pre\">en.kids.example.com</span></tt>) within the domain.</p>\n</div>\n</div>\n<div class=\"section\" id=\"path-segment\">\n<h3>Path Segment<a class=\"headerlink\" href=\"#path-segment\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A common variation, especially for language specification, is to have the variant prefix the path, such as <tt class=\"docutils literal\"><span class=\"pre\">www.example.com/en/</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">www.example.com/es/</span></tt>. However, encoding the variant within the path (<tt class=\"docutils literal\"><span class=\"pre\">www.example.com/blog/en/</span></tt> ) is also supported.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Putting the variant within the path may make it difficult to re-create variation URLs of items. If the item&#8217;s URL is either prefixed or suffixed with dimension information, the variation URL is easily created.</p>\n</div>\n</div>\n<div class=\"section\" id=\"path-parameters-or-delimited-suffix\">\n<h3>Path Parameters or Delimited Suffix<a class=\"headerlink\" href=\"#path-parameters-or-delimited-suffix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Path parameters are defined by\n<a class=\"reference external\" href=\"http://tools.ietf.org/html/rfc3986#section-3.3\">Section 3.3 of RFC 3986</a>\nas semicolon (;) and comma (,). One benefit of the semicolon is support within Python&#8217;s urlparse module. It is also possible to use a dot (.) delimiter if you wish, although it is less common and not recommended.</p>\n</div>\n</div>\n<div class=\"section\" id=\"defining-the-url-patterns\">\n<h2>Defining the URL patterns<a class=\"headerlink\" href=\"#defining-the-url-patterns\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"assigning-a-variant-to-a-domain\">\n<h3>Assigning a variant to a domain<a class=\"headerlink\" href=\"#assigning-a-variant-to-a-domain\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Domain variations are defined within each variant&#8217;s dictionary. Each variant for each dimension has several options, one of which is domain. If domain is not specified, the default domain is assumed.</p>\n</div>\n<div class=\"section\" id=\"dimensions-within-the-path\">\n<h3>Dimensions Within the Path<a class=\"headerlink\" href=\"#dimensions-within-the-path\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The middleware checks if the requested path fits a defined set of regular expressions in <tt class=\"docutils literal\"><span class=\"pre\">TEXT_VARIATIONS['URL_REGEXES']</span></tt>. To make the regular expressions easier to define, there are two shortcuts available.</p>\n<dl class=\"docutils\">\n<dt><strong>{&lt;dimension_name&gt;}</strong></dt>\n<dd>This string will substitute a named group with every variant as an option. So <tt class=\"docutils literal\"><span class=\"pre\">'{language}'</span></tt> could result in <tt class=\"docutils literal\"><span class=\"pre\">'(?P&lt;language&gt;en|es|es-mx|fr)'</span></tt></dd>\n<dt><strong>{path}</strong></dt>\n<dd>This string will substitute a group to catch any character: <tt class=\"docutils literal\"><span class=\"pre\">(.*)</span></tt></dd>\n</dl>\n</div>\n<div class=\"section\" id=\"examples\">\n<h3>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Assuming two dimensions: &#8216;language&#8217; and &#8216;audience&#8217; with variants &#8216;en&#8217;, &#8216;es&#8217;, &#8216;es-mx&#8217;, &#8216;fr&#8217; and &#8216;cd&#8217;, &#8216;tn&#8217;, &#8216;ad&#8217; respectively.</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"3%\" />\n<col width=\"37%\" />\n<col width=\"60%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">#</th>\n<th class=\"head\">RegEx Pattern</th>\n<th class=\"head\">Result</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>1</td>\n<td><tt class=\"docutils literal\"><span class=\"pre\">'{language}/{path};{audience}'</span></tt></td>\n<td><tt class=\"docutils literal\"><span class=\"pre\">'(?P&lt;language&gt;en|es|es-mx|fr)/(.*);(?P&lt;audience&gt;cd/tn/ad)'</span></tt></td>\n</tr>\n<tr><td>2</td>\n<td><tt class=\"docutils literal\"><span class=\"pre\">'{path}/{language}/{path};{audience}'</span></tt></td>\n<td><tt class=\"docutils literal\"><span class=\"pre\">'(.*)/(?P&lt;language&gt;en|es|es-mx|fr)/(.*);(?P&lt;audience&gt;cd/tn/ad)'</span></tt></td>\n</tr>\n<tr><td>3</td>\n<td><tt class=\"docutils literal\"><span class=\"pre\">'{language}/{path}\\.{audience}'</span></tt></td>\n<td><tt class=\"docutils literal\"><span class=\"pre\">'(?P&lt;language&gt;en|es|es-mx|fr)/(.*)\\.(?P&lt;audience&gt;cd/tn/ad)'</span></tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"textvariationmiddleware\">\n<h2>TextVariationMiddleware<a class=\"headerlink\" href=\"#textvariationmiddleware\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The middleware modifies the request</p>\n<ul class=\"simple\">\n<li>Matches request path against the configured regular expressions</li>\n<li>If it matches, extract the dimensions and set into <tt class=\"docutils literal\"><span class=\"pre\">request.META['TEXT_VARIATIONS']</span></tt></li>\n<li>Join the unnamed groups in the matching regular expression with &#8220;/&#8221;</li>\n<li>Set <tt class=\"docutils literal\"><span class=\"pre\">request.path</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">request.path_info</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">request.META['PATH_INFO']</span></tt> to the resulting value</li>\n</ul>\n<p>See <a class=\"reference internal\" href=\"../reference/middleware/#textvariationmiddleware\"><em>TextVariationMiddleware</em></a> for more detailed information.</p>\n</div>\n<div class=\"section\" id=\"requested-variation-returned-variation-and-urls\">\n<h2>Requested Variation, Returned Variation and URLs<a class=\"headerlink\" href=\"#requested-variation-returned-variation-and-urls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>URLs without dimension information serve the default variation</li>\n<li>URLS should either contain no variation information, or contain information for every dimension.</li>\n<li>If a variant of one dimension is requested, the default variants of any other dimensions should be requested.</li>\n<li>If a requested variation does not exist, a fallback variation is returned.</li>\n<li>The Text Variation context processor will create a <tt class=\"docutils literal\"><span class=\"pre\">text_variations</span></tt> variable with the variations returned for each field. If there are multiple variable fields in a model, you should pick one field to populate a <tt class=\"docutils literal\"><span class=\"pre\">&lt;link</span> <span class=\"pre\">rel=&quot;canonical&quot;</span> <span class=\"pre\">href=&quot;&quot;</span> <span class=\"pre\">/&gt;</span></tt> tag.</li>\n<li>The template could provide an alert on the page that the requested variation was not available and the substituted variation was.</li>\n</ul>\n</div>\n</div>\n", "display_toc": true, "title": "Variations and URLs", "sourcename": "variations_and_urls.txt", "customsidebar": null, "current_page_name": "variations_and_urls", "next": {"link": "../templates/", "title": "Templates"}, "rellinks": [["genindex", "General Index", "I", "index"], ["templates", "Templates", "N", "next"], ["getting_started", "Getting Started", "P", "previous"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Variations and URLs</a><ul>\n<li><a class=\"reference internal\" href=\"#ways-of-handling-variations-in-urls\">Ways of Handling Variations in URLs</a><ul>\n<li><a class=\"reference internal\" href=\"#domain\">Domain</a></li>\n<li><a class=\"reference internal\" href=\"#path-segment\">Path Segment</a></li>\n<li><a class=\"reference internal\" href=\"#path-parameters-or-delimited-suffix\">Path Parameters or Delimited Suffix</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#defining-the-url-patterns\">Defining the URL patterns</a><ul>\n<li><a class=\"reference internal\" href=\"#assigning-a-variant-to-a-domain\">Assigning a variant to a domain</a></li>\n<li><a class=\"reference internal\" href=\"#dimensions-within-the-path\">Dimensions Within the Path</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#textvariationmiddleware\">TextVariationMiddleware</a></li>\n<li><a class=\"reference internal\" href=\"#requested-variation-returned-variation-and-urls\">Requested Variation, Returned Variation and URLs</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../getting_started/", "title": "Getting Started"}, "metatags": ""}